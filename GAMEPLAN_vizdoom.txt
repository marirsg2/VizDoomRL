
==================================

For SML paper analysis

1) Vary Epsilon, and exploration time AGAINST the number of actions (8 vs 3) and see how long the optimal policy takes




==================================

learned about save weights, and save state
NEEDED save state for lstm prediction


NOOO...need to segment by isTerminal state information.
Also when testing, prolly need separate memory container ?? YES ! needed.

NOPE, SOLUTION: Get sample will pull out the right sample size with preceeding zero frames.
When you want to get best action, simple insert the current state in the last position.
ALSO ask for the sample in the recent past.



TEST you k-frame implementation with CNN only



@2) THE ONLY benefit of lstm is that a DIFFERENT CNN is applied to each time step, and then converged into the lstm.
JUST test this version too. see if lstm works at all. That way you can make peace.
TAKE ANDY's k-frames, and use that as the time parameter !! remove batch size and stateful

?? if the stateful is removed, do I need to remember the state? nope.


#TODO CHECK STACKOVERFLOW FOR THE ANSWER

LOOK AT THE TERMINAL OUTPUT, what do you see.

higher discount is better !! so we connect move and shoot, rather than just shoot.
OR vice versa, LOWER discount, so rotate and shoot is not a behavior.

1.5) HAve one epoch to just calculate the average image. Subtract from the successive images and feed that as
the information. MAYBE do one better. NORMALIZE the image, and see what you get.

auto enc is useless. the CNN does that.
OR DOES IT!! andy worried that retraining causes weights to drop.



2) TEST your expectation on the lstm learning code where you know the correct output and it works.



Then try autoencoder


LATER ALTERNATIVE: learning time distributed. and lstm pains.
IT maybe better to just batch train the lstm. store as episodes.
    look up examples. Modify code to store full episodes before training.
    seems like you need time distributed module
    review if the look_Back parameter is needed.


Do the lstm save state anywhere else you do predict before fit.
Double check the reset state cases